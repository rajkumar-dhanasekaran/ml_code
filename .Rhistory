getwd()
install.packages("openintro")
source('~/.active-rstudio-document', echo=TRUE)
auto.price <- read.auto(path = "/Users/Cipher/Downloads/DAT203")
auto.price <- read.auto(path = "/Users/Cipher/Downloads/DAT203/mod4/")
str(auto.price)
source('~/Downloads/DAT203/Mod4/ExploreAutos.R', echo=TRUE)
pairs(~ ., data = auto.price[, num.cols])
lapply(plot.cols2, auto.hist)
lapply(plot.cols2, auto.box)
lapply(plot.cols3, scatter.auto)
scatter.auto.cond(plot.cols3)
source('~/Downloads/DAT203/Mod4/ExploreIncome.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
Income <- read.income('/Users/Cipher/Downloads/DAT203/mod4/')
str(Income)
feature.names <- name.list(Income)
lapply(feature.names, bar.income)
lapply(feature.names, box.income)
install.packages("dplyr")
2235548,2830864,2156759))
my.data<-data.frame(federal.states=c("Baden-W端rttemberg","Bayern","Berlin",
"Brandenburg","Bremen","Hamburg","Hessen",
"Mecklenburg-Vorpommern","Niedersachsen",
"Nordrhein-Westfalen","Rheinland-Pfalz",
"Saarland","Sachsen","Sachsen-Anhalt",
"Schleswig-Holstein","Th端ringen"),
Population=c(10716644,12691568,3469849,2457872,661888,1762791,
6093888,1599138,7826739,17638098,4011582,989035,4055274,
2235548,2830864,2156759))
my.data
library(ggplot2)
library(ggmap)
install.packages("ggmap")
str(my.data)
my.data$federal.states<-as.character(my.data$federal.states)
str(my.data)
latlon <- geocode(my.data$federal.states)
library(ggmap)
latlon <- geocode(my.data$federal.states)
library(ggmap)
example(ggmap)
args(ggmap)
library(map)
library(ggmap)
library(ggplot2)
library(ggmap)
library(maps)
library(ggmap)
install.packages("maps")
library(ggmap)
latlon <- geocode(my.data$federal.states)
warnings()
latlon
my.data
my.data$latlon <- latlon
my.data
my.data$federal.states[1]<-"Baden-Wurttemberg"
my.data$federal.states[16]
my.data$federal.states[16]<-"Thuringen Germany"
my.data
latlon <- geocode(my.data$federal.states)
my.data$latlon <- latlon
my.data
Germany <- ggmap(get_map(location=my.data,zoom=6), extent="panel")
Germany <- ggmap(get_map(location="Germany",zoom=6), extent="panel")
Germany <- ggmap(get_map(location=Germany,zoom=6), extent="panel")
Germany <- ggmap(get_map(location=germany_center,zoom=6), extent="panel")
Germany
Germany + geom_point(aes(x=latlon.lon, y=latlon.lat),data=my.data$Population,col=red,alpha=0.4,size=my.data*circle_scale)
Germany + geom_point(aes(x=latlon.lon, y=latlon.lat),data=my.data$Population,col="red",alpha=0.4,size=my.data*circle_scale)
circle_scale <- 0.000002
Germany + geom_point(aes(x=latlon.lon, y=latlon.lat),data=my.data$Population,col="red",alpha=0.4,size=my.data*circle_scale)
Germany + geom_point(aes(x=latlon.lon, y=latlon.lat),data=my.data,col="red",alpha=0.4,size=my.data$Population*circle_scale)
names(my.data)
my.data
ncol(my.data)
str(my.data)
my.data<-data.frame(federal.states=c("Baden-W端rttemberg","Bayern","Berlin",
"Brandenburg","Bremen","Hamburg","Hessen",
"Mecklenburg-Vorpommern","Niedersachsen",
"Nordrhein-Westfalen","Rheinland-Pfalz",
"Saarland","Sachsen","Sachsen-Anhalt",
"Schleswig-Holstein","Th端ringen"),
Population=c(10716644,12691568,3469849,2457872,661888,1762791,
6093888,1599138,7826739,17638098,4011582,989035,4055274,
2235548,2830864,2156759))
str(my.data)
my.data$federal.states<-as.character(my.data$federal.states)
latlon <- geocode(my.data$federal.states)
my.data$lon <- latlon$lon
my.data$lat <- latlon$lat
my.data
my.data$federal.states[1]<-"Baden-Wurttemberg"
my.data$federal.states[16]<-"Thuringen Germany"
latlon <- geocode(my.data$federal.states)
my.data$lon <- latlon$lon
my.data$lat <- latlon$lat
my.data
Germany <- ggmap(get_map(location="Germany",zoom=6), extent="panel")
Germany + geom_point(aes(x=lon, y=lat),data=my.data,col="red",alpha=0.4,size=my.data$Population*circle_scale)
install.packages("httr")
install.packages("devtools")
install.packages("twitteR")
install.packages("base64enc")
library(httr)
library(devtools)
library(twitteR)
library(base64enc)
api_key = " hQhMJ4zBpvoCbn3JrUmQQ"
api_secret ="ilxQNQr29VKJnU3VS1sSweGgRqmDDWqcCqfyKQgNC4"
token = "19518412-cCmlvTayJ7qqS6ueZAXbUaC1jvBGnUoO57vNlKUW5"
token_secret = "6KmdTGDk8tBo78LgglXKisSCjc8B6Aj5MbUnmWV0"
setup_twitter_oauth(api_key, api_secret, token, token_secret)
install.packages("streamR")
install.packages("RCurl")
install.packages("RJSONIO")
install.packages("stringr")
library(streamR)
library(RCurl)
library(RJSONIO)
library(stringr)
library(twitteR)
library(base64enc)
api_key = " hQhMJ4zBpvoCbn3JrUmQQ"
api_secret ="ilxQNQr29VKJnU3VS1sSweGgRqmDDWqcCqfyKQgNC4"
token = "19518412-cCmlvTayJ7qqS6ueZAXbUaC1jvBGnUoO57vNlKUW5"
token_secret = "6KmdTGDk8tBo78LgglXKisSCjc8B6Aj5MbUnmWV0"
setup_twitter_oauth(api_key, api_secret, token, token_secret)
tweets <- searchTwitter("'Bank Of Oklahoma' OR SunTrust OR #SunTrust OR #suntrust OR #Comericabank OR #COMERICA OR @Comerica OR BB&T OR SunTrust OR KeyBank OR Frost OR #KeyBank", n=1500, lang="en", since="2010-10-13")
tweetsdf <- twListToDF(tweets)
write.csv(tweetsdf,file="/Users/Documents/tweets.csv")
setup_twitter_oauth(api_key, api_secret, token, token_secret)
api_key = "LsneJUqqBuU4192znQuZfXw8s"
api_secret ="PFHSO6X8BzrhZZn4MmOE0nENK2YnDvEnZ0yM4bj81ThqbAaQY3"
token = "786485342379446272-agm2xqli5Yl9mO4E518efz4GMcO0deq"
token_secret = "Lc8dqdqkjrhJJGEiU2bNooV4naKBu350D5V9QPkrz9BIj"
setup_twitter_oauth(api_key, api_secret, token, token_secret)
api_key = " hQhMJ4zBpvoCbn3JrUmQQ"
api_secret ="ilxQNQr29VKJnU3VS1sSweGgRqmDDWqcCqfyKQgNC4"
token = "19518412-cCmlvTayJ7qqS6ueZAXbUaC1jvBGnUoO57vNlKUW5"
token_secret = "6KmdTGDk8tBo78LgglXKisSCjc8B6Aj5MbUnmWV0"
setup_twitter_oauth(api_key, api_secret, token, token_secret)
api_key = " hQhMJ4zBpvoCbn3JrUmQQ"
api_secret ="ilxQNQr29VKJnU3VS1sSweGgRqmDDWqcCqfyKQgNC4"
token = "19518412-cCmlvTayJ7qqS6ueZAXbUaC1jvBGnUoO57vNlKUW5"
token_secret = "6KmdTGDk8tBo78LgglXKisSCjc8B6Aj5MbUnmWV0"
setup_twitter_oauth(api_key, api_secret, token, token_secret)
api_key = "LsneJUqqBuU4192znQuZfXw8s"
api_secret ="PFHSO6X8BzrhZZn4MmOE0nENK2YnDvEnZ0yM4bj81ThqbAaQY3"
token = "786485342379446272-agm2xqli5Yl9mO4E518efz4GMcO0deq"
token_secret = "Lc8dqdqkjrhJJGEiU2bNooV4naKBu350D5V9QPkrz9BIj"
setup_twitter_oauth(api_key, api_secret, token, token_secret)
tweets <- searchTwitter("'Bank Of Oklahoma' OR SunTrust OR #SunTrust OR #suntrust OR #Comericabank OR #COMERICA OR @Comerica OR BB&T OR SunTrust OR KeyBank OR Frost OR #KeyBank", n=1500, lang="en", since="2010-10-13")
library(httr)
library(devtools)
library(twitteR)
library(base64enc)
##
api_key = " hQhMJ4zBpvoCbn3JrUmQQ"
api_secret ="ilxQNQr29VKJnU3VS1sSweGgRqmDDWqcCqfyKQgNC4"
token = "19518412-cCmlvTayJ7qqS6ueZAXbUaC1jvBGnUoO57vNlKUW5"
token_secret = "6KmdTGDk8tBo78LgglXKisSCjc8B6Aj5MbUnmWV0"
setup_twitter_oauth(api_key, api_secret, token, token_secret)
install.packages("bayesAB")
install.packages("~/Downloads/bayesAB_0.7.0.tar", repos = NULL)
install.packages("~/Downloads/bayesAB_0.6.0.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("bayesAB")
install.packages("bayesAB")
install.packages("~/Downloads/bayesAB_0.7.0.tar", repos = NULL)
library(bayesAB)
install.packages("~/Downloads/bayesAB_0.6.0.tgz", repos = NULL, type = .Platform$pkgType)
library(bayesAB)
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'Admin user password')
library(bayesAB)
install.packages("bayesAB")
install.packages("Rcpp")
library(bayesAB)
getRversion()
library(bayesAB)
install.packages("bayesAB")
library(bayesAB)
plotBeta(1000,1000)
plotBeta(100,1000)
plotBeta(100,100)
plotBeta(1000,1000)
library(magrittr)
n <- 1e3
out_weaker_priors <- rep(NA, n)
out_weaker_priors
n
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(devtools)
library(RCurl)
source_url("https://raw.githubusercontent.com/leeper/slopegraph/master/R/slopegraph.r")
d <- read.csv(text = getURL("https://raw.githubusercontent.com/jkeirstead/r-slopegraph/master/cancer_survival_rates.csv"))
df <- reshape(d, timevar = "year", idvar = c("group"), direction = "wide")
rownames(df) <- df$group; df <- round(df[,-1],0)
slopegraph(df, col.line='gray', xlim = c(-1, ncol(df)+2), binval = 2,
labels=c("5 years", "10 years", "15 years", "20 years"),
col.xaxt="transparent", main="")
install.packages("RCurl")
source("/Users/Cipher/Documents/slopegraph.r")
source("/Users/Cipher/Documents/ml_code/slopegraph.r")
source("/Users/Cipher/Documents/ml_code/segmentize.r")
d <- read.csv(text = getURL("https://raw.githubusercontent.com/jkeirstead/r-slopegraph/master/cancer_survival_rates.csv"))
library(RCurl)
d <- read.csv(text = getURL("https://raw.githubusercontent.com/jkeirstead/r-slopegraph/master/cancer_survival_rates.csv"))
df <- reshape(d, timevar = "year", idvar = c("group"), direction = "wide")
rownames(df) <- df$group; df <- round(df[,-1],0)
slopegraph(df, col.line='gray', xlim = c(-1, ncol(df)+2), binval = 2,
labels=c("5 years", "10 years", "15 years", "20 years"),
col.xaxt="transparent", main="")
library(prettyR)
install.packages("prettyR")
install.packages("plotrix")
library(prettyR)
library(plotrix)
d <- read.csv(text = getURL("https://raw.githubusercontent.com/jkeirstead/r-slopegraph/master/cancer_survival_rates.csv"),header=T)
df <- stretch_df(d, "group", "value")
bumpchart(df[,3:6], rank=FALSE, col="gray50", top.labels=c(5,10,15,20),
labels=df[,1], main="Years cancer survival by group", mar=c(2,12,5,12))
if(!require(prophet)) {
install.packages("prophet"); require(prophet)} #load / install+load prophet
if(!require(wikipediatrend)) {
install.packages("wikipediatrend"); require(wikipediatrend)} #load / install+load wikipediatrend
if(!require(dplyr)) {
install.packages("dplyr"); require(dplyr)} #load / install+load dplyr
df <- read.csv('../examples/example_wp_peyton_manning.csv') %>%
mutate(y = log(y))
page_views <- wp_trend("main_page", from = "2015-10-01", to = "2015-11-30")
page_views
plot(
page_views[, c("date","count")],
type="b"
)
if(!require(ggplot2)) {
install.packages("ggplot2"); require(ggplot2)} #load / install+load ggplot2
ggplot(page_views, aes(x=date, y=count)) +
geom_line(size=1.5, colour="steelblue") +
geom_smooth(method="loess", colour="#00000000", fill="#001090", alpha=0.1) +
scale_y_continuous( breaks=seq(5e6, 50e6, 5e6) ,
label= paste(seq(5,50,5),"M") ) +
theme_bw()
page_views <-
wp_trend(
page = c( "Millennium_Development_Goals", "Climate_Change"),
from = "2015-01-01",
to   = "2015-01-30"
)
ggplot(page_views, aes(x=date, y=count, group=page, color=page)) +
geom_line(size=1.5) + theme_bw()
page_views <-
wp_trend(
page = "Millennium_Development_Goals" ,
from = "2000-01-01",
to   = "2009-01-30"
)
ggplot(page_views, aes(x=date, y=count, color=wp_year(date))) +
geom_line() +
stat_smooth(method = "lm", formula = y ~ poly(x, 22), color="#CD0000a0", size=1.2) +
theme_bw()
page_views <-
wp_trend(
page = c("Objetivos_de_Desarrollo_del_Milenio", "Millennium_Development_Goals") ,
lang = c("es", "en"),
from = "2015-01-01",
to   = "2015-04-30"
)
ggplot(page_views, aes(x=date, y=count, group=lang, color=lang, fill=lang)) +
geom_smooth(size=1.5) +
geom_point() +
theme_bw()
wp_trend("Millennium_Development_Goals", file="Millennium_Development_Goals.csv", from = "2015-01-01", to="2015-01-30")
wp_trend("Objetivos_de_Desarrollo_del_Milenio", lang="es", file="Millennium_Development_Goals.csv", from = "2015-01-01", to="2015-01-30")
Millennium_Development_Goals <- wp_load( file="Millennium_Development_Goals.csv" )
Millennium_Development_Goals
wp_get_cache()
wp_cache_reset()
titles <- wp_linked_pages("Millennium_Development_Goals", "en")
titles <- titles[titles$lang %in% c("de", "es", "ar", "ru"),]
titles
titles <- titles[titles$lang %in% c("de", "es", "ar", "ru", "ta"),]
titles
page_views <-
wp_trend(
page = titles$page,
lang = titles$lang,
from = "2015-06-01",
to   = "2015-11-30"
)
for(i in unique(page_views$lang) ){
iffer <- page_views$lang==i
page_views[iffer, ]$count <- scale(page_views[iffer, ]$count)
}
ggplot(page_views, aes(x=date, y=count, group=lang, color=lang)) +
geom_line(size=1.2, alpha=0.5) +
ylab("standardized count\n(by lang: m=0, var=1)") +
theme_bw() +
scale_colour_brewer(palette="Set1") +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
getwd()
setwd("/Users/Cipher/Documents")
wp_trend("Peyton_Manning", file="example_wp_peyton_manning.csv", from = "2007-01-01", to="2017-01-31")
df <- read.csv('../example_wp_peyton_manning.csv') %>%
mutate(y = log(y))
df <- read.csv('example_wp_peyton_manning.csv') %>%
mutate(y = log(y))
peyton_manning <- wp_load( file="example_wp_peyton_manning.csv" )
peyton_manning
colnames(peyton_manning)
head(peyton_manning)
df <- read.csv('example_wp_peyton_manning.csv') %>%
mutate(y = log(count))
df
m <- prophet(df)
df <- df[c(1,8),]
df
count(df)
nrows(df)
nrow(df)
nrow(peyton_manning)
df <- read.csv('example_wp_peyton_manning.csv') %>%
mutate(y = log(count))
nrow(df)
m <- prophet(df)
colnames(df)<-c('ds','y')
colnames(df)
df
df[,c(1,8)]
df <- df[,c(1,8)]
colnames(df)<-c('ds','y')
m <- prophet(df)
setwd("/Users/Cipher/Documents/ml_code")
wp_trend("Peyton_Manning", file="example_wp_peyton_manning.csv", from = "2009-01-01", to="2017-01-31")
df <- read.csv('example_wp_peyton_manning.csv') %>%
mutate(y = log(count))
df <- df[,c(1,8)]
nrow(df)
colnames(df)<-c('ds','y')
df
m <- prophet(df)
peyton_manning
log(0)
df <- read.csv('example_wp_peyton_manning.csv')
df[df$count == 0,]
df <- df[df$count != 0,]
df <- df %>%
mutate(y = log(count))
df
df <- df[,c(1,8)]
nrow(df)
colnames(df)<-c('ds','y')
m <- prophet(df)
future <- make_future_dataframe(m, periods = 365)
tail(future)
m
tail(future)
future
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(m, forecast)
prophet_plot_components(m, forecast)
